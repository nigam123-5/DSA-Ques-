class Pair {
    
    int x;
    int y;
    
    Pair(int x , int y){
        this.x = x;
        this.y = y;
    }
};


class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        Queue<Pair> q = new LinkedList<>();
        
        
        int totalOranges =  0 , time = 0  , rottenOranges = 0;
        
        for(int i = 0; i<grid.length ; i++){
            
            for(int j = 0; j<grid[0].length ; j++){
                
                if(grid[i][j] == 1 || grid[i][j] == 2)
                    totalOranges++;
                    
                 if (grid[i][j] == 2) 
                 q.offer(new Pair(i, j));
            }
        }
        
        
        if(totalOranges == 0)
            return 0;
            
            
        while(!q.isEmpty()){
            
            int size = q.size();
            rottenOranges += size;
            
            if( rottenOranges == totalOranges) return time; 
            
            time++;
            
            for(int i = 0; i < size ; i++){
                
                Pair p = q.peek();
                
                if(p.x+1 < grid.length && grid[p.x+1][p.y] == 1){
                    
                    grid[p.x+1][p.y] = 2;
                    q.offer(new Pair (p.x+1 , p.y));
                    
                }
                
                if(p.x-1 >=0 && grid[p.x-1][p.y] == 1)
                {
                    grid[p.x-1][p.y] = 2;
                    q.offer(new Pair(p.x - 1, p.y));
                }
                
                if (p.y+1 < grid[0].length && grid[p.x][p.y+1] == 1) {
                    grid[p.x][p.y + 1] = 2;
                    q.offer(new Pair(p.x, p.y + 1));
                }
                
                if (p.y - 1 >= 0 && grid[p.x][p.y - 1] == 1) {
                    grid[p.x][p.y - 1] = 2;
                    q.offer(new Pair(p.x, p.y - 1));
                }
                
                
                q.poll();
            
            }
        }
        
        return -1;
    }
}
