// 1st approach 

class Solution {
    static int maxBinTreeGCD(ArrayList<ArrayList<Integer>> arr, int N) {
        // code here
        
        HashMap<Integer , Integer > mp = new HashMap<>();
        int maxGcd = 0;
        for(ArrayList<Integer> ele : arr ){
            
            int x = ele.get(0);
            int y = ele.get(1);
            
            
            if(mp.get(x) != null)                        //{{4, 5}, {4, 2}, {2, 3}, {2, 1}, {3, 6}, {3, 12}}
            {
                int val = gcd(y , mp.get(x));           //
                maxGcd = Math.max(maxGcd , val);
                
            }
            
            else{
                
                mp.put(x , y);
            }
            
        }
        
        return maxGcd;
    }
    
     static int gcd(int a , int b){
         
         if(a == 0)
         return b;
         
         return gcd(b%a , a);
     }
};




// 2nd approach 

class Solution {
  public:
    int maxBinTreeGCD(vector<vector<int>> arr, int N) {
        
        sort(arr.begin(),arr.end());
         int maxGcd = 0;
         
         for(int i=1;i<arr.size();i++){   // {{4,3} , {4,5}} 
             
            if(arr[i][0]==arr[i-1][0]){
                
                 int val = __gcd(arr[i][1],arr[i-1][1]);
                 maxGcd = max(maxGcd,val);
            }
         }
         return maxGcd;
    }
};

