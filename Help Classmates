// Brute-force Approach

class Solution {
	public static int[] help_classmate(int arr[], int n) 
	{ 
	    
	    int res [] = new int [arr.length];
	    
	    Arrays.fill(res , -1);
	    
	    
	    for(int i = 0 ; i<arr.length ; i++){
	        
	        for(int j  = i+1 ; j<arr.length ; j++){
	            
	            if(arr[j] < arr[i]){
	            res[i] = arr[j];
	            break;
	        }
	        }
	    }
	    
	    return res;
	} 
}


// Optimized Approach Using Stack

class Solution {
	public static int[] help_classmate(int arr[], int n) 
	{ 
	    
	    int res [] = new int [arr.length];
	    Stack<Integer> st = new Stack<>();
	    
	    for(int i = n-1 ; i>=0 ; i--){
	        
	        if(!st.isEmpty()) {
	        while(!st.isEmpty() && st.peek()>=arr[i]){
	            
	            st.pop();
	        }
	        
	    }
	        
	        res[i] = st.isEmpty()?-1 : st.peek();
	        st.push(arr[i]);
	    }
	    
	    return res;
	} 
}
