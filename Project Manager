class Solution {
    
    
    int max(int a[]){
        int max = 0;
        for (int ele: a)
            max = Math.max(max,ele);
        return max;
    }
    public int minTime(ArrayList<pair> dependency, int[] duration, int n, int m) {
        // code here
        
        
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int indeg[] = new int[n];
        int dp[] = new int[n];
        for (int i = 0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        
        for (pair p: dependency){
            adj.get(p.x).add(p.y);
            indeg[p.y]++;
            
        }
        
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i<n; i++){
            if (indeg[i]==0){
                q.add(i);
                dp[i] = duration[i];
            }
        }
        
        int c = 0;
        while(!q.isEmpty()){
            int cur = q.poll();
            c++;
            for (int i: adj.get(cur)){
                dp[i] = Math.max(dp[i],dp[cur]+duration[i]);
                if (--indeg[i]==0){
                    q.add(i);
                }
            }
        }
        
        if (c==n){
            return max(dp);
        }
        return -1;
        
    }
}
