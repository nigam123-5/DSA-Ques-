class Solution {
    // Function to count paths between two vertices in a directed graph.
    
    int c = 0;
    public int countPaths(int V, ArrayList<ArrayList<Integer>> adj, int source,
                   int destination) {
                       
        boolean vis[] = new boolean[V+1];
        Arrays.fill(vis , false);
        for(int i = 0 ; i<=V ; i++){
            
            if(i == source){
                
                vis[i] = true;
                dfs(source , destination , adj , vis);
                
            }
        }
      
      return c;
    }
    
    
    private void dfs(int node, int destination , ArrayList<ArrayList<Integer>> adj,
                boolean vis[]){
                    
    vis[node] = true;
           
      if(node == destination)
    {
        c++;
        return;
    }
    
        for(int neighbour: adj.get(node))
        {
            if(!vis[neighbour])
            {
                dfs(neighbour , destination , adj , vis);
                
                vis[neighbour] = false;
            }
        }      
}

}
